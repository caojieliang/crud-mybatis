<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <!-- 属性文件配置 -->
    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:data.properties</value>-->
                <!--<value>classpath:finance.properties</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!-- 载入服务端配置文件(仅用于当前配置文件) -->
    <!--Multiple locations may be specified, separated by commas-->
    <!-- 在Spring 3.1后该配置已经使用PropertySourcesPlaceholderConfigurer替代 PropertyPlaceholderConfigurer了 -->
    <context:property-placeholder order="9" location="classpath:data.properties"/>

    <context:annotation-config/>

    <!-- 事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 注解事务管理器 -->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- 事务管理模板 用于编程式事务 -->
    <bean id="txTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="txManager"/>
    </bean>

    <!-- 定义数据源Bean，使用C3P0数据源实现 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${ds.driverClass}"/>
        <property name="jdbcUrl" value="${ds.jdbcUrl}"/>
        <property name="user" value="${ds.user}"/>
        <property name="password" value="${ds.password}"/>
        <property name="minPoolSize" value="${ds.minPoolSize}"/>
        <property name="maxPoolSize" value="${ds.maxPoolSize}"/>
        <property name="initialPoolSize" value="${ds.initialPoolSize}"/>
        <property name="maxIdleTime" value="300"/>
        <property name="idleConnectionTestPeriod" value="60"/>
        <property name="acquireRetryAttempts" value="3"/>
        <property name="acquireRetryDelay" value="300"/>
        <property name="maxStatements" value="0"/>
        <property name="maxStatementsPerConnection" value="100"/>
        <property name="numHelperThreads" value="6"/>
        <property name="maxAdministrativeTaskTime" value="5"/>
        <property name="preferredTestQuery" value="SELECT 1"/>
    </bean>

    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="plugins">-->
            <!--<array>-->
                <!--<bean class="com.baturu.finance.dal.CatSelectInterceptor"/>-->
            <!--</array>-->
        <!--</property>-->
    </bean>

    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.landian.crud.mybatis.mapper"/>
    </bean>
    <!-- 扩展DAO(另一种写法) -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"-->
          <!--p:basePackage="liang.jie.crud.mybatis.mapper"-->
          <!--p:sqlSessionFactoryBeanName="sqlSessionFactory" />-->


</beans>
